package com.smartbanking.sol.services;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import com.smartbanking.sol.model.User;
import com.smartbanking.sol.repository.UserRepository;

import java.util.Optional;

@Service
public class UserServices {

    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder;

    public UserServices(UserRepository userRepository) {
        this.userRepository = userRepository;
        this.passwordEncoder = new BCryptPasswordEncoder();
    }

    // Find a user by email
    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByUserEmail(email);
    }

    // Add a new user
    public User addUser(User user) {
        // Encrypt the password before saving
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    // Validate password
    public boolean isPasswordValid(String rawPassword, String encodedPassword) {
        return passwordEncoder.matches(rawPassword, encodedPassword);
    }
    
    public void deleteUser(User user) {
        userRepository.delete(user);
    }

}
